diff --git a/cmd/sentry.go b/cmd/sentry.go
index cc6df30..82754e3 100644
--- a/cmd/sentry.go
+++ b/cmd/sentry.go
@@ -30,7 +30,7 @@ to quickly create a Cobra application.`,
 			return
 		}
 		sentryService := sentry.NewSentry(&cfg)
-		sentryService.GetIssues()
+		sentryService.GetTagValues("sentry-stg", "platform-staging", "server_name")
 	},
 }
 
diff --git a/pkg/sentry/sentry.go b/pkg/sentry/sentry.go
index c89409d..e4172a6 100644
--- a/pkg/sentry/sentry.go
+++ b/pkg/sentry/sentry.go
@@ -2,49 +2,21 @@ package sentry
 
 import (
 	"fmt"
-	"github.com/charmbracelet/log"
+
 	"github.com/gingray/swisstools/pkg/common"
-	"net/http"
-	"net/url"
 )
 
 type Sentry struct {
 	ApiToken string
 	Url      string
 }
-type client struct {
-	baseUrl  string
-	apiToken string
-	http     *http.Client
-}
-
-func newClient(sentry *Sentry) *client {
-	return &client{baseUrl: sentry.Url, http: &http.Client{}, apiToken: sentry.ApiToken}
-}
 
 func NewSentry(cfg *common.Config) *Sentry {
 	return &Sentry{ApiToken: cfg.Sentry.ApiToken, Url: cfg.Sentry.Url}
 }
 
-func (c *client) makeRequest() {
-	url, _ := url.JoinPath(c.baseUrl, "api/0/projects/")
-	req, _ := http.NewRequest("GET", url, nil)
-	req.Header.Add("Content-Type", "application/json")
-	req.Header.Add("Authorization", fmt.Sprintf("Bearer %s", c.apiToken))
-	req.Header.Add("Accept", "application/json")
-	req.Close = true
-
-	resp, err := c.http.Do(req)
-	defer resp.Body.Close()
-	if err != nil {
-		log.Error(err)
-	}
-
-	fmt.Println(resp.StatusCode)
-
-}
-
-func (s *Sentry) GetIssues() {
+func (s *Sentry) GetTagValues(organization string, project string, tag string) {
 	client := newClient(s)
-	client.makeRequest()
+	tags, _ := client.GetTagValues(organization, project, tag)
+	fmt.Println(tags)
 }
